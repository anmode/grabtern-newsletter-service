/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubscriberService } from "../subscriber.service";
import { SubscriberCreateInput } from "./SubscriberCreateInput";
import { Subscriber } from "./Subscriber";
import { SubscriberFindManyArgs } from "./SubscriberFindManyArgs";
import { SubscriberWhereUniqueInput } from "./SubscriberWhereUniqueInput";
import { SubscriberUpdateInput } from "./SubscriberUpdateInput";
import { EmailLogFindManyArgs } from "../../emailLog/base/EmailLogFindManyArgs";
import { EmailLog } from "../../emailLog/base/EmailLog";
import { EmailLogWhereUniqueInput } from "../../emailLog/base/EmailLogWhereUniqueInput";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";

export class SubscriberControllerBase {
  constructor(protected readonly service: SubscriberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Subscriber })
  async createSubscriber(
    @common.Body() data: SubscriberCreateInput
  ): Promise<Subscriber> {
    return await this.service.createSubscriber({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        subscribedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Subscriber] })
  @ApiNestedQuery(SubscriberFindManyArgs)
  async subscribers(@common.Req() request: Request): Promise<Subscriber[]> {
    const args = plainToClass(SubscriberFindManyArgs, request.query);
    return this.service.subscribers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        subscribedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Subscriber })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subscriber(
    @common.Param() params: SubscriberWhereUniqueInput
  ): Promise<Subscriber | null> {
    const result = await this.service.subscriber({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        subscribedAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Subscriber })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubscriber(
    @common.Param() params: SubscriberWhereUniqueInput,
    @common.Body() data: SubscriberUpdateInput
  ): Promise<Subscriber | null> {
    try {
      return await this.service.updateSubscriber({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          subscribedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Subscriber })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubscriber(
    @common.Param() params: SubscriberWhereUniqueInput
  ): Promise<Subscriber | null> {
    try {
      return await this.service.deleteSubscriber({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          subscribedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/emailLogs")
  @ApiNestedQuery(EmailLogFindManyArgs)
  async findEmailLogs(
    @common.Req() request: Request,
    @common.Param() params: SubscriberWhereUniqueInput
  ): Promise<EmailLog[]> {
    const query = plainToClass(EmailLogFindManyArgs, request.query);
    const results = await this.service.findEmailLogs(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        newsletter: {
          select: {
            id: true,
          },
        },

        sentAt: true,
        status: true,

        subscriber: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/emailLogs")
  async connectEmailLogs(
    @common.Param() params: SubscriberWhereUniqueInput,
    @common.Body() body: EmailLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailLogs: {
        connect: body,
      },
    };
    await this.service.updateSubscriber({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/emailLogs")
  async updateEmailLogs(
    @common.Param() params: SubscriberWhereUniqueInput,
    @common.Body() body: EmailLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailLogs: {
        set: body,
      },
    };
    await this.service.updateSubscriber({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/emailLogs")
  async disconnectEmailLogs(
    @common.Param() params: SubscriberWhereUniqueInput,
    @common.Body() body: EmailLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emailLogs: {
        disconnect: body,
      },
    };
    await this.service.updateSubscriber({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/subscriptions")
  @ApiNestedQuery(SubscriptionFindManyArgs)
  async findSubscriptions(
    @common.Req() request: Request,
    @common.Param() params: SubscriberWhereUniqueInput
  ): Promise<Subscription[]> {
    const query = plainToClass(SubscriptionFindManyArgs, request.query);
    const results = await this.service.findSubscriptions(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        subscriber: {
          select: {
            id: true,
          },
        },

        subscriptionDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subscriptions")
  async connectSubscriptions(
    @common.Param() params: SubscriberWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        connect: body,
      },
    };
    await this.service.updateSubscriber({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subscriptions")
  async updateSubscriptions(
    @common.Param() params: SubscriberWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        set: body,
      },
    };
    await this.service.updateSubscriber({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subscriptions")
  async disconnectSubscriptions(
    @common.Param() params: SubscriberWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        disconnect: body,
      },
    };
    await this.service.updateSubscriber({
      where: params,
      data,
      select: { id: true },
    });
  }
}
