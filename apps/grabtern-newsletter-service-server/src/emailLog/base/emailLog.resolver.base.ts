/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailLog } from "./EmailLog";
import { EmailLogCountArgs } from "./EmailLogCountArgs";
import { EmailLogFindManyArgs } from "./EmailLogFindManyArgs";
import { EmailLogFindUniqueArgs } from "./EmailLogFindUniqueArgs";
import { CreateEmailLogArgs } from "./CreateEmailLogArgs";
import { UpdateEmailLogArgs } from "./UpdateEmailLogArgs";
import { DeleteEmailLogArgs } from "./DeleteEmailLogArgs";
import { Newsletter } from "../../newsletter/base/Newsletter";
import { Subscriber } from "../../subscriber/base/Subscriber";
import { EmailLogService } from "../emailLog.service";
@graphql.Resolver(() => EmailLog)
export class EmailLogResolverBase {
  constructor(protected readonly service: EmailLogService) {}

  async _emailLogsMeta(
    @graphql.Args() args: EmailLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailLog])
  async emailLogs(
    @graphql.Args() args: EmailLogFindManyArgs
  ): Promise<EmailLog[]> {
    return this.service.emailLogs(args);
  }

  @graphql.Query(() => EmailLog, { nullable: true })
  async emailLog(
    @graphql.Args() args: EmailLogFindUniqueArgs
  ): Promise<EmailLog | null> {
    const result = await this.service.emailLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailLog)
  async createEmailLog(
    @graphql.Args() args: CreateEmailLogArgs
  ): Promise<EmailLog> {
    return await this.service.createEmailLog({
      ...args,
      data: {
        ...args.data,

        newsletter: args.data.newsletter
          ? {
              connect: args.data.newsletter,
            }
          : undefined,

        subscriber: args.data.subscriber
          ? {
              connect: args.data.subscriber,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmailLog)
  async updateEmailLog(
    @graphql.Args() args: UpdateEmailLogArgs
  ): Promise<EmailLog | null> {
    try {
      return await this.service.updateEmailLog({
        ...args,
        data: {
          ...args.data,

          newsletter: args.data.newsletter
            ? {
                connect: args.data.newsletter,
              }
            : undefined,

          subscriber: args.data.subscriber
            ? {
                connect: args.data.subscriber,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailLog)
  async deleteEmailLog(
    @graphql.Args() args: DeleteEmailLogArgs
  ): Promise<EmailLog | null> {
    try {
      return await this.service.deleteEmailLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Newsletter, {
    nullable: true,
    name: "newsletter",
  })
  async getNewsletter(
    @graphql.Parent() parent: EmailLog
  ): Promise<Newsletter | null> {
    const result = await this.service.getNewsletter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Subscriber, {
    nullable: true,
    name: "subscriber",
  })
  async getSubscriber(
    @graphql.Parent() parent: EmailLog
  ): Promise<Subscriber | null> {
    const result = await this.service.getSubscriber(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
