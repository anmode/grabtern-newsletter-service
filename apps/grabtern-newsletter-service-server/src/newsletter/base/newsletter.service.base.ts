/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Newsletter as PrismaNewsletter,
  EmailLog as PrismaEmailLog,
} from "@prisma/client";

export class NewsletterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NewsletterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.newsletter.count(args);
  }

  async newsletters(
    args: Prisma.NewsletterFindManyArgs
  ): Promise<PrismaNewsletter[]> {
    return this.prisma.newsletter.findMany(args);
  }
  async newsletter(
    args: Prisma.NewsletterFindUniqueArgs
  ): Promise<PrismaNewsletter | null> {
    return this.prisma.newsletter.findUnique(args);
  }
  async createNewsletter(
    args: Prisma.NewsletterCreateArgs
  ): Promise<PrismaNewsletter> {
    return this.prisma.newsletter.create(args);
  }
  async updateNewsletter(
    args: Prisma.NewsletterUpdateArgs
  ): Promise<PrismaNewsletter> {
    return this.prisma.newsletter.update(args);
  }
  async deleteNewsletter(
    args: Prisma.NewsletterDeleteArgs
  ): Promise<PrismaNewsletter> {
    return this.prisma.newsletter.delete(args);
  }

  async findEmailLogs(
    parentId: string,
    args: Prisma.EmailLogFindManyArgs
  ): Promise<PrismaEmailLog[]> {
    return this.prisma.newsletter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .emailLogs(args);
  }
}
