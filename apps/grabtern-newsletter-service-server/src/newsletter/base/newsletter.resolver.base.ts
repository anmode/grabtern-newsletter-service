/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Newsletter } from "./Newsletter";
import { NewsletterCountArgs } from "./NewsletterCountArgs";
import { NewsletterFindManyArgs } from "./NewsletterFindManyArgs";
import { NewsletterFindUniqueArgs } from "./NewsletterFindUniqueArgs";
import { CreateNewsletterArgs } from "./CreateNewsletterArgs";
import { UpdateNewsletterArgs } from "./UpdateNewsletterArgs";
import { DeleteNewsletterArgs } from "./DeleteNewsletterArgs";
import { EmailLogFindManyArgs } from "../../emailLog/base/EmailLogFindManyArgs";
import { EmailLog } from "../../emailLog/base/EmailLog";
import { NewsletterService } from "../newsletter.service";
@graphql.Resolver(() => Newsletter)
export class NewsletterResolverBase {
  constructor(protected readonly service: NewsletterService) {}

  async _newslettersMeta(
    @graphql.Args() args: NewsletterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Newsletter])
  async newsletters(
    @graphql.Args() args: NewsletterFindManyArgs
  ): Promise<Newsletter[]> {
    return this.service.newsletters(args);
  }

  @graphql.Query(() => Newsletter, { nullable: true })
  async newsletter(
    @graphql.Args() args: NewsletterFindUniqueArgs
  ): Promise<Newsletter | null> {
    const result = await this.service.newsletter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Newsletter)
  async createNewsletter(
    @graphql.Args() args: CreateNewsletterArgs
  ): Promise<Newsletter> {
    return await this.service.createNewsletter({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Newsletter)
  async updateNewsletter(
    @graphql.Args() args: UpdateNewsletterArgs
  ): Promise<Newsletter | null> {
    try {
      return await this.service.updateNewsletter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Newsletter)
  async deleteNewsletter(
    @graphql.Args() args: DeleteNewsletterArgs
  ): Promise<Newsletter | null> {
    try {
      return await this.service.deleteNewsletter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EmailLog], { name: "emailLogs" })
  async findEmailLogs(
    @graphql.Parent() parent: Newsletter,
    @graphql.Args() args: EmailLogFindManyArgs
  ): Promise<EmailLog[]> {
    const results = await this.service.findEmailLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
